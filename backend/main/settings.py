"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from datetime import timedelta
from main.logo_base64 import EMAIL_LOGO_BASE64
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-g$8!+3s!h&h8!z*g*v&x-q#@p#o(w^u=u#&y$q)z!o@f@b^s#y')

# Key for encrypting sensitive data
ENCRYPTION_KEY = os.environ.get('ENCRYPTION_KEY', 'qoaITmJdlY5XItbBa5herscqsp5os4t0Hn2gPjvUu6c=').encode()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = [
    'cyphex.me',
    'www.cyphex.me',
    'securitysite.herokuapp.com',
    'localhost',
    '127.0.0.1',
]

# If you have a specific environment variable for allowed hosts on Heroku
if 'ALLOWED_HOSTS_HEROKU' in os.environ:
    ALLOWED_HOSTS.extend(os.environ.get('ALLOWED_HOSTS_HEROKU').split(','))

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'djoser',
    'api',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django.contrib.sites',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'main/templates'), os.path.join(BASE_DIR, '..', 'frontend', 'build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'main.context_processors.email_logo',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

# Allow all origins for development purposes. 
# For production, you should restrict this to your actual frontend domain.
CORS_ORIGIN_ALLOW_ALL = False

CORS_ALLOWED_ORIGINS = [
    'https://cyphex.me',
    'https://www.cyphex.me',
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    'https://cyphex.me',
    'https://www.cyphex.me',
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default='sqlite:///' + str(BASE_DIR / 'db.sqlite3'),
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# PayU Configuration
PAYU_MERCHANT_KEY = os.environ.get('PAYU_MERCHANT_KEY', 'XFCm39')
PAYU_MERCHANT_SALT = os.environ.get('PAYU_MERCHANT_SALT', 'D6H7cJfacCcSZEqE0MtWjSDm0haBMDFu')
PAYU_MODE = os.environ.get('PAYU_MODE', 'LIVE')  # Set to 'LIVE' for production

# Default primary key field type
APPEND_SLASH = False

# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email Configuration
ADMIN_EMAIL = 'admin@cyphex.com' # The email address for admin notifications

AUTH_USER_MODEL = 'api.UserAccount'

# Domain name for email templates
DOMAIN_NAME = 'http://localhost:8000'  # Using localhost for development

# Frontend URL for generating links in emails
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'https://cyphex.me')
BACKEND_URL = os.environ.get('BACKEND_URL', 'http://localhost:8000')
LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = '/admin/dashboard/'

AUTHENTICATION_BACKENDS = (
    'api.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
)

# Django Sites framework
SITE_ID = 1

# Email settings
# For development, emails are printed to the console.
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Email settings for Brevo (formerly Sendinblue)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp-relay.brevo.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '8f32d6001@smtp-brevo.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'Obcfa4V6MPhmI1rv')
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'CYPHEX <security@cyphex.me>')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'TOKEN_OBTAIN_SERIALIZER': 'api.serializers.CustomTokenObtainPairSerializer',
}

# Djoser settings
DJOSER = {
    'LOGIN_FIELD': 'email',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    'SEND_CONFIRMATION_EMAIL': True,
    'SET_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_URL': 'password/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
    'SERIALIZERS': {
        'user_create': 'api.serializers.UserCreateSerializer',
        'user': 'api.serializers.UserSerializer',
        'current_user': 'api.serializers.UserSerializer',
        'user_delete': 'djoser.serializers.UserDeleteSerializer',
    },
    'EMAIL': {
        'activation': 'main.email.ActivationEmail',
        'confirmation': 'main.email.ConfirmationEmail',
        'password_reset': 'main.email.PasswordResetEmail',
        'password_changed_confirmation': 'main.email.PasswordChangedConfirmationEmail',
    },
    'TEMPLATES': {
        'activation': 'email/activation.html',
        'confirmation': 'email/confirmation.html',
        'password_reset': 'email/password_reset.html',
        'password_changed_confirmation': 'email/password_changed_confirmation.html',
    },
    'SITE_NAME': 'CYPHEX',
    'DOMAIN': FRONTEND_URL.replace('http://', '').replace('https://', ''),  # Use the frontend URL without protocol
    'PROTOCOL': 'http' if DEBUG else 'https',
    'EMAIL_CONTEXT_PROCESSORS': [
        'main.context_processors.email_logo',
    ],
}


# Production Security Settings
# Note: These settings should only be enabled in a production environment (i.e., when DEBUG is False)
if not DEBUG:
    # SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    # Disabling the server header is a web server configuration, not a Django setting.
    # For example, in Nginx, you would use 'server_tokens off;'.
    # In Gunicorn, you can change the 'Server' header via the --header-name option.
